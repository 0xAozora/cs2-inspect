package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Info) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.S, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "a":
			z.A, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "d":
			z.D, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "m":
			z.M, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
		case "f":
			z.Float, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "e":
			z.Seed, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "Seed")
				return
			}
		case "t":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Stickers")
				return
			}
			if cap(z.Stickers) >= int(zb0002) {
				z.Stickers = (z.Stickers)[:zb0002]
			} else {
				z.Stickers = make([]Sticker, zb0002)
			}
			for za0001 := range z.Stickers {
				err = z.Stickers[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Stickers", za0001)
					return
				}
			}
		case "k":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Keychain")
					return
				}
				z.Keychain = nil
			} else {
				if z.Keychain == nil {
					z.Keychain = new(Keychain)
				}
				err = z.Keychain.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Keychain")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Info) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(8)
	var zb0001Mask uint8 /* 8 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.M == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Stickers == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Keychain == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not omitted
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.S)
		if err != nil {
			err = msgp.WrapError(err, "S")
			return
		}
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.A)
	if err != nil {
		err = msgp.WrapError(err, "A")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.D)
	if err != nil {
		err = msgp.WrapError(err, "D")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// write "m"
		err = en.Append(0xa1, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.M)
		if err != nil {
			err = msgp.WrapError(err, "M")
			return
		}
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Float)
	if err != nil {
		err = msgp.WrapError(err, "Float")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Seed)
	if err != nil {
		err = msgp.WrapError(err, "Seed")
		return
	}
	if (zb0001Mask & 0x40) == 0 { // if not omitted
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Stickers)))
		if err != nil {
			err = msgp.WrapError(err, "Stickers")
			return
		}
		for za0001 := range z.Stickers {
			err = z.Stickers[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Stickers", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not omitted
		// write "k"
		err = en.Append(0xa1, 0x6b)
		if err != nil {
			return
		}
		if z.Keychain == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Keychain.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Keychain")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Info) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(8)
	var zb0001Mask uint8 /* 8 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.M == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Stickers == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Keychain == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not omitted
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendUint64(o, z.S)
	}
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendUint64(o, z.A)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendUint64(o, z.D)
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// string "m"
		o = append(o, 0xa1, 0x6d)
		o = msgp.AppendUint64(o, z.M)
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendFloat32(o, z.Float)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendUint16(o, z.Seed)
	if (zb0001Mask & 0x40) == 0 { // if not omitted
		// string "t"
		o = append(o, 0xa1, 0x74)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Stickers)))
		for za0001 := range z.Stickers {
			o, err = z.Stickers[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Stickers", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not omitted
		// string "k"
		o = append(o, 0xa1, 0x6b)
		if z.Keychain == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Keychain.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Keychain")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Info) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.S, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "a":
			z.A, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "d":
			z.D, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "m":
			z.M, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
		case "f":
			z.Float, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "e":
			z.Seed, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seed")
				return
			}
		case "t":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Stickers")
				return
			}
			if cap(z.Stickers) >= int(zb0002) {
				z.Stickers = (z.Stickers)[:zb0002]
			} else {
				z.Stickers = make([]Sticker, zb0002)
			}
			for za0001 := range z.Stickers {
				bts, err = z.Stickers[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Stickers", za0001)
					return
				}
			}
		case "k":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Keychain = nil
			} else {
				if z.Keychain == nil {
					z.Keychain = new(Keychain)
				}
				bts, err = z.Keychain.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Keychain")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Info) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Float32Size + 2 + msgp.Uint16Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Stickers {
		s += z.Stickers[za0001].Msgsize()
	}
	s += 2
	if z.Keychain == nil {
		s += msgp.NilSize
	} else {
		s += z.Keychain.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Lookup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.S, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "a":
			z.A, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "d":
			z.D, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "m":
			z.M, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Lookup) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.M == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not omitted
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.S)
		if err != nil {
			err = msgp.WrapError(err, "S")
			return
		}
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.A)
	if err != nil {
		err = msgp.WrapError(err, "A")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.D)
	if err != nil {
		err = msgp.WrapError(err, "D")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// write "m"
		err = en.Append(0xa1, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.M)
		if err != nil {
			err = msgp.WrapError(err, "M")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Lookup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.M == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not omitted
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendUint64(o, z.S)
	}
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendUint64(o, z.A)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendUint64(o, z.D)
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// string "m"
		o = append(o, 0xa1, 0x6d)
		o = msgp.AppendUint64(o, z.M)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Lookup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.S, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		case "a":
			z.A, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "d":
			z.D, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "m":
			z.M, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "M")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Lookup) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Request) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "L")
				return
			}
			if cap(z.L) >= int(zb0002) {
				z.L = (z.L)[:zb0002]
			} else {
				z.L = make([]*Info, zb0002)
			}
			for za0001 := range z.L {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
					z.L[za0001] = nil
				} else {
					if z.L[za0001] == nil {
						z.L[za0001] = new(Info)
					}
					err = z.L[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
				}
			}
		case "s":
			z.S, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Request) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.L)))
	if err != nil {
		err = msgp.WrapError(err, "L")
		return
	}
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.L[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "L", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.S)
		if err != nil {
			err = msgp.WrapError(err, "S")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Request) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.L)))
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.L[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "L", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendUint64(o, z.S)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "L")
				return
			}
			if cap(z.L) >= int(zb0002) {
				z.L = (z.L)[:zb0002]
			} else {
				z.L = make([]*Info, zb0002)
			}
			for za0001 := range z.L {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.L[za0001] = nil
				} else {
					if z.L[za0001] == nil {
						z.L[za0001] = new(Info)
					}
					bts, err = z.L[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
				}
			}
		case "s":
			z.S, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Request) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.L[za0001].Msgsize()
		}
	}
	s += 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Request_Safe) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "L")
				return
			}
			if cap(z.L) >= int(zb0002) {
				z.L = (z.L)[:zb0002]
			} else {
				z.L = make([]*Lookup, zb0002)
			}
			for za0001 := range z.L {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
					z.L[za0001] = nil
				} else {
					if z.L[za0001] == nil {
						z.L[za0001] = new(Lookup)
					}
					err = z.L[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
				}
			}
		case "s":
			z.S, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Request_Safe) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.L)))
	if err != nil {
		err = msgp.WrapError(err, "L")
		return
	}
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.L[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "L", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.S)
		if err != nil {
			err = msgp.WrapError(err, "S")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Request_Safe) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.S == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.L)))
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.L[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "L", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendUint64(o, z.S)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request_Safe) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "L")
				return
			}
			if cap(z.L) >= int(zb0002) {
				z.L = (z.L)[:zb0002]
			} else {
				z.L = make([]*Lookup, zb0002)
			}
			for za0001 := range z.L {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.L[za0001] = nil
				} else {
					if z.L[za0001] == nil {
						z.L[za0001] = new(Lookup)
					}
					bts, err = z.L[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "L", za0001)
						return
					}
				}
			}
		case "s":
			z.S, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "S")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Request_Safe) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.L {
		if z.L[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.L[za0001].Msgsize()
		}
	}
	s += 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
			if cap(z.Info) >= int(zb0002) {
				z.Info = (z.Info)[:zb0002]
			} else {
				z.Info = make([]*Info, zb0002)
			}
			for za0001 := range z.Info {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
					z.Info[za0001] = nil
				} else {
					if z.Info[za0001] == nil {
						z.Info[za0001] = new(Info)
					}
					err = z.Info[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Response) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "i"
	err = en.Append(0x81, 0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Info)))
	if err != nil {
		err = msgp.WrapError(err, "Info")
		return
	}
	for za0001 := range z.Info {
		if z.Info[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Info[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Info", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "i"
	o = append(o, 0x81, 0xa1, 0x69)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Info)))
	for za0001 := range z.Info {
		if z.Info[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Info[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Info", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
			if cap(z.Info) >= int(zb0002) {
				z.Info = (z.Info)[:zb0002]
			} else {
				z.Info = make([]*Info, zb0002)
			}
			for za0001 := range z.Info {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Info[za0001] = nil
				} else {
					if z.Info[za0001] == nil {
						z.Info[za0001] = new(Info)
					}
					bts, err = z.Info[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Response) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Info {
		if z.Info[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Info[za0001].Msgsize()
		}
	}
	return
}
