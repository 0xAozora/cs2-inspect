package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Keychain) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.ID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "p":
			z.Pattern, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Pattern")
				return
			}
		case "x":
			z.X, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "z":
			z.Z, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Z")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Keychain) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "i"
	err = en.Append(0x85, 0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Pattern)
	if err != nil {
		err = msgp.WrapError(err, "Pattern")
		return
	}
	// write "x"
	err = en.Append(0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.X)
	if err != nil {
		err = msgp.WrapError(err, "X")
		return
	}
	// write "y"
	err = en.Append(0xa1, 0x79)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Y)
	if err != nil {
		err = msgp.WrapError(err, "Y")
		return
	}
	// write "z"
	err = en.Append(0xa1, 0x7a)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Z)
	if err != nil {
		err = msgp.WrapError(err, "Z")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Keychain) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "i"
	o = append(o, 0x85, 0xa1, 0x69)
	o = msgp.AppendUint32(o, z.ID)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendUint32(o, z.Pattern)
	// string "x"
	o = append(o, 0xa1, 0x78)
	o = msgp.AppendFloat32(o, z.X)
	// string "y"
	o = append(o, 0xa1, 0x79)
	o = msgp.AppendFloat32(o, z.Y)
	// string "z"
	o = append(o, 0xa1, 0x7a)
	o = msgp.AppendFloat32(o, z.Z)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Keychain) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.ID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "p":
			z.Pattern, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pattern")
				return
			}
		case "x":
			z.X, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "z":
			z.Z, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Z")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Keychain) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + msgp.Uint32Size + 2 + msgp.Float32Size + 2 + msgp.Float32Size + 2 + msgp.Float32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Sticker) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.ID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "f":
			z.Wear, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Wear")
				return
			}
		case "s":
			z.Slot, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Slot")
				return
			}
		case "x":
			z.X, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "r":
			z.R, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "R")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Sticker) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Wear == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Slot == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.X == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Y == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.R == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// write "f"
		err = en.Append(0xa1, 0x66)
		if err != nil {
			return
		}
		err = en.WriteFloat32(z.Wear)
		if err != nil {
			err = msgp.WrapError(err, "Wear")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not omitted
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteUint8(z.Slot)
		if err != nil {
			err = msgp.WrapError(err, "Slot")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// write "x"
		err = en.Append(0xa1, 0x78)
		if err != nil {
			return
		}
		err = en.WriteFloat32(z.X)
		if err != nil {
			err = msgp.WrapError(err, "X")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not omitted
		// write "y"
		err = en.Append(0xa1, 0x79)
		if err != nil {
			return
		}
		err = en.WriteFloat32(z.Y)
		if err != nil {
			err = msgp.WrapError(err, "Y")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not omitted
		// write "r"
		err = en.Append(0xa1, 0x72)
		if err != nil {
			return
		}
		err = en.WriteFloat32(z.R)
		if err != nil {
			err = msgp.WrapError(err, "R")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Sticker) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Wear == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Slot == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.X == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Y == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.R == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendUint32(o, z.ID)
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// string "f"
		o = append(o, 0xa1, 0x66)
		o = msgp.AppendFloat32(o, z.Wear)
	}
	if (zb0001Mask & 0x4) == 0 { // if not omitted
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendUint8(o, z.Slot)
	}
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// string "x"
		o = append(o, 0xa1, 0x78)
		o = msgp.AppendFloat32(o, z.X)
	}
	if (zb0001Mask & 0x10) == 0 { // if not omitted
		// string "y"
		o = append(o, 0xa1, 0x79)
		o = msgp.AppendFloat32(o, z.Y)
	}
	if (zb0001Mask & 0x20) == 0 { // if not omitted
		// string "r"
		o = append(o, 0xa1, 0x72)
		o = msgp.AppendFloat32(o, z.R)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Sticker) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.ID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "f":
			z.Wear, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Wear")
				return
			}
		case "s":
			z.Slot, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Slot")
				return
			}
		case "x":
			z.X, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "r":
			z.R, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "R")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Sticker) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + msgp.Float32Size + 2 + msgp.Uint8Size + 2 + msgp.Float32Size + 2 + msgp.Float32Size + 2 + msgp.Float32Size
	return
}
